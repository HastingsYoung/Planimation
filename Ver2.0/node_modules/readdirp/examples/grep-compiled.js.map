{"version":3,"sources":["grep.js"],"names":[],"mappings":"AAAA;;AACA,IAAI,WAAY,QAAQ,IAAR,CAAhB;AAAA,IACI,OAAY,QAAQ,MAAR,CADhB;AAAA,IAEI,KAAY,QAAQ,IAAR,CAFhB;AAAA,IAGI,OAAY,QAAQ,MAAR,CAHhB;AAAA,IAII,KAAY,QAAQ,cAAR,CAJhB;;AAOA,SAAS,iBAAT,CAA4B,UAA5B,EAAwC;;AAEtC,SAAO,GAAG,OAAH,CAAW,UAAU,KAAV,EAAiB;AACjC,QAAI,SAAS,CAAb;AAAA,QACI,gBAAgB,EADpB;AAAA,QAEI,aAAa,IAFjB;;AAIA,aAAS,MAAT,GAAmB;AACjB,aAAO,GAAG,OAAH,CAAW,UAAU,IAAV,EAAgB;AAChC;AACA,eAAO,CAAC,KAAK,OAAL,CAAa,UAAb,CAAD,GAA4B,SAAS,IAAT,GAAgB,IAA5C,GAAmD,SAA1D;AACD,OAHM,CAAP;AAID;;AAED,aAAS,SAAT,GAAsB;AACpB,aAAO,GAAG,OAAH,CACH,SAAS,KAAT,CAAgB,IAAhB,EAAsB;AACpB,sBAAc,IAAd,CAAmB,IAAnB;AACD,OAHE,EAIH,SAAS,GAAT,GAAgB;;AAEd;AACA,YAAI,cAAc,MAAlB,EAA0B;AACxB,cAAI,SAAS,EAAE,MAAM,KAAR,EAAe,OAAO,aAAtB,EAAb;;AAEA;AACA,qBAAW,IAAX,CAAgB,MAAhB,EAAwB,MAAxB;AACD;AACD,aAAK,IAAL,CAAU,KAAV;AACD,OAdE,CAAP;AAgBD;;AAED,OAAG,gBAAH,CAAoB,MAAM,QAA1B,EAAoC,EAAE,UAAU,OAAZ,EAApC;;AAEE;AAFF,KAGG,IAHH,CAGQ,GAAG,KAAH,CAAS,IAAT,CAHR;;AAKE;AALF,KAMG,IANH,CAMQ,QANR;;AAQE;AARF,KASG,IATH,CASQ,WATR;AAWD,GA1CM,CAAP;AA2CD;;AAED,QAAQ,GAAR,CAAY,0BAAZ;;AAEA;AACA,SAAS,EAAE,MAAM,KAAK,IAAL,CAAU,SAAV,CAAR,EAA8B,YAAY,MAA1C,EAAT;;AAEE;AAFF,CAGG,IAHH,CAGQ,kBAAkB,WAAlB,CAHR;;AAKE;AALF,CAMG,IANH,CAOI,GAAG,OAAH,CAAW,UAAU,GAAV,EAAe;AACxB,SAAO,SAAS,IAAI,IAAJ,CAAS,IAAlB,GAAyB,MAAzB,GAAkC,IAAI,KAAJ,CAAU,IAAV,CAAe,MAAf,CAAzC;AACD,CAFD,CAPJ,EAWG,IAXH,CAWQ,QAAQ,MAXhB","file":"grep-compiled.js","sourcesContent":["'use strict';\nvar readdirp =  require('..')\n  , util     =  require('util')\n  , fs       =  require('fs')\n  , path     =  require('path')\n  , es       =  require('event-stream')\n  ;\n\nfunction findLinesMatching (searchTerm) {\n\n  return es.through(function (entry) {\n    var lineno = 0\n      , matchingLines = []\n      , fileStream = this;\n\n    function filter () {\n      return es.mapSync(function (line) {\n        lineno++;\n        return ~line.indexOf(searchTerm) ? lineno + ': ' + line : undefined;\n      });\n    }\n\n    function aggregate () {\n      return es.through(\n          function write (data) { \n            matchingLines.push(data); \n          }\n        , function end () {\n\n            // drop files that had no matches\n            if (matchingLines.length) {\n              var result = { file: entry, lines: matchingLines };\n\n              // pass result on to file stream\n              fileStream.emit('data', result);\n            }\n            this.emit('end');\n          }\n      );\n    }\n\n    fs.createReadStream(entry.fullPath, { encoding: 'utf-8' })\n\n      // handle file contents line by line\n      .pipe(es.split('\\n'))\n\n      // keep only the lines that matched the term\n      .pipe(filter())\n\n      // aggregate all matching lines and delegate control back to the file stream\n      .pipe(aggregate())\n      ;\n  });\n}\n\nconsole.log('grepping for \"arguments\"');\n\n// create a stream of all javascript files found in this and all sub directories\nreaddirp({ root: path.join(__dirname), fileFilter: '*.js' })\n\n  // find all lines matching the term for each file (if none found, that file is ignored)\n  .pipe(findLinesMatching('arguments'))\n\n  // format the results and output\n  .pipe(\n    es.mapSync(function (res) {\n      return '\\n\\n' + res.file.path + '\\n\\t' + res.lines.join('\\n\\t');\n    })\n  )\n  .pipe(process.stdout)\n  ;\n"]}